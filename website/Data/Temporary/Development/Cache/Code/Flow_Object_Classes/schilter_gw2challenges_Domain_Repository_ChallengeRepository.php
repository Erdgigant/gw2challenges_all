<?php 
namespace schilter\gw2challenges\Domain\Repository;

/*
 * This file is part of the Internezzo.PassePartout package.
 */
use Neos\Flow\Annotations as Flow;

/**
 * @Flow\Scope("singleton")
 */
class ChallengeRepository_Original {
	
	/**
	 * @FLow\Inject
	 * @var \schilter\gw2challenges\Service\PDOService
	 */
	protected $pdoService;
	
	public function getById($id){
		$stmt = $this->pdoService->getPdo()->prepare("SELECT * FROM schilter_gw2challenges_domain_model_challenge WHERE id =".$id);
		$stmt->execute();
		return $this->propertyMapper->convert(
				$stmt->fetch(),
				\schilter\gw2challenges\Domain\Model\Challenge::class,
				$this->getConfiguration());
	}
	
	public function getConfiguration()
	{
		/** @var PropertyMappingConfiguration $configuration */
		$configuration = new \Neos\Flow\Property\PropertyMappingConfiguration();
	
		$configuration->setTypeConverterOptions(\Neos\Flow\Property\TypeConverter\PersistentObjectConverter::class, [
				\Neos\Flow\Property\TypeConverter\PersistentObjectConverter::CONFIGURATION_CREATION_ALLOWED => true,
				\Neos\Flow\Property\TypeConverter\PersistentObjectConverter::CONFIGURATION_MODIFICATION_ALLOWED => true
		]);
		$configuration->skipUnknownProperties();
		$configuration->allowProperties('id', 'name', 'minis');
	
		return $configuration;
	}
}
#
# Start of Flow generated Proxy code
#
namespace schilter\gw2challenges\Domain\Repository;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * 
 * @\Neos\Flow\Annotations\Scope("singleton")
 */
class ChallengeRepository extends ChallengeRepository_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if (get_class($this) === 'schilter\gw2challenges\Domain\Repository\ChallengeRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('schilter\gw2challenges\Domain\Repository\ChallengeRepository', $this);
        if ('schilter\gw2challenges\Domain\Repository\ChallengeRepository' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
  'pdoService' => '\\schilter\\gw2challenges\\Service\\PDOService',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'schilter\gw2challenges\Domain\Repository\ChallengeRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('schilter\gw2challenges\Domain\Repository\ChallengeRepository', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->pdoService = new \schilter\gw2challenges\Service\PDOService();
        $this->Flow_Injected_Properties = array (
  0 => 'pdoService',
);
    }
}
# PathAndFilename: /var/www/php/Packages/Application/schilter.gw2challenges/Classes/Domain/Repository/ChallengeRepository.php
#